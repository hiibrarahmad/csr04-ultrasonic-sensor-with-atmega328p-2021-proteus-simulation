
ultrasonic sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000006b8  0000074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800118  00800118  00000764  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecf  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00001703  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054b  00000000  00000000  00001f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000465  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000632  00000000  00000000  000029d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003003  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
  9e:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <HCSR04Init>:

void HCSR04Init()
{
	
	// we're setting the trigger pin as output as it will generate ultrasonic sound wave
	US_DDR|=(1<<US_TRIG_POS);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	08 95       	ret

000000ae <HCSR04Trigger>:

void HCSR04Trigger()
{   // this function will generate ultrasonic sound wave for 15 microseconds
	//Send a 10uS pulse on trigger line
	
	US_PORT|=(1<<US_TRIG_POS);	//high
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	80 e5       	ldi	r24, 0x50	; 80
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <HCSR04Trigger+0x8>
	
	_delay_us(15);				//wait 15uS
	
	US_PORT&=~(1<<US_TRIG_POS);	//low
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	88 b9       	out	0x08, r24	; 8
  c0:	08 95       	ret

000000c2 <GetPulseWidth>:
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	dc 01       	movw	r26, r24
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <GetPulseWidth+0x12>
	{
		if(!(US_PIN & (1<<US_ECHO_POS)))
  ca:	31 99       	sbic	0x06, 1	; 6
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <GetPulseWidth+0x20>
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	a1 1d       	adc	r26, r1
  d2:	b1 1d       	adc	r27, r1
  d4:	80 3c       	cpi	r24, 0xC0	; 192
  d6:	27 e2       	ldi	r18, 0x27	; 39
  d8:	92 07       	cpc	r25, r18
  da:	29 e0       	ldi	r18, 0x09	; 9
  dc:	a2 07       	cpc	r26, r18
  de:	b1 05       	cpc	r27, r1
  e0:	a0 f3       	brcs	.-24     	; 0xca <GetPulseWidth+0x8>
		continue;	//Line is still low, so wait
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
  e2:	80 3c       	cpi	r24, 0xC0	; 192
  e4:	97 42       	sbci	r25, 0x27	; 39
  e6:	a9 40       	sbci	r26, 0x09	; 9
  e8:	b1 05       	cpc	r27, r1
  ea:	c1 f1       	breq	.+112    	; 0x15c <GetPulseWidth+0x9a>
	
	//High Edge Found
	
	// Section -2 : This section is all about preparing the timer for counting the time of the pulse. Timers in microcontrllers is used for timimg operation
	//Setup Timer1
	TCCR1A=0X00;
  ec:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1=0x00;			// This line start the counter to start counting time
  f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	dc 01       	movw	r26, r24
 104:	0c c0       	rjmp	.+24     	; 0x11e <GetPulseWidth+0x5c>
	{
		if(US_PIN & (1<<US_ECHO_POS))
 106:	31 9b       	sbis	0x06, 1	; 6
 108:	11 c0       	rjmp	.+34     	; 0x12c <GetPulseWidth+0x6a>
		{
			if(TCNT1 > 60000) break; else continue;   // if the TCNT1 value gets higher than 60000 it means there is not object in the range of the sensor
 10a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 10e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 112:	21 36       	cpi	r18, 0x61	; 97
 114:	3a 4e       	sbci	r19, 0xEA	; 234
 116:	50 f4       	brcc	.+20     	; 0x12c <GetPulseWidth+0x6a>
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
	TCNT1=0x00;			// This line start the counter to start counting time

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	a1 1d       	adc	r26, r1
 11c:	b1 1d       	adc	r27, r1
 11e:	80 3c       	cpi	r24, 0xC0	; 192
 120:	27 e2       	ldi	r18, 0x27	; 39
 122:	92 07       	cpc	r25, r18
 124:	29 e0       	ldi	r18, 0x09	; 9
 126:	a2 07       	cpc	r26, r18
 128:	b1 05       	cpc	r27, r1
 12a:	68 f3       	brcs	.-38     	; 0x106 <GetPulseWidth+0x44>
		}
		else
		break;
	}

	if(i==600000)
 12c:	80 3c       	cpi	r24, 0xC0	; 192
 12e:	97 42       	sbci	r25, 0x27	; 39
 130:	a9 40       	sbci	r26, 0x09	; 9
 132:	b1 05       	cpc	r27, r1
 134:	b1 f0       	breq	.+44     	; 0x162 <GetPulseWidth+0xa0>
	return US_NO_OBSTACLE;	//Indicates time out

	//Falling edge found

	result=TCNT1;          // microcontroller stores the the value of the counted pulse time in the TCNT1 register. So, we're returning this value to the
 136:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 13a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 13e:	a0 e0       	ldi	r26, 0x00	; 0
 140:	b0 e0       	ldi	r27, 0x00	; 0
	// main function for utilizing it later

	//Stop Timer
	TCCR1B=0x00;
 142:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	if(result > 60000)
 146:	81 36       	cpi	r24, 0x61	; 97
 148:	2a ee       	ldi	r18, 0xEA	; 234
 14a:	92 07       	cpc	r25, r18
 14c:	a1 05       	cpc	r26, r1
 14e:	b1 05       	cpc	r27, r1
 150:	58 f4       	brcc	.+22     	; 0x168 <GetPulseWidth+0xa6>
	return US_NO_OBSTACLE;	//No obstacle
	else
	return (result>>1);
 152:	b6 95       	lsr	r27
 154:	a7 95       	ror	r26
 156:	97 95       	ror	r25
 158:	87 95       	ror	r24
 15a:	08 95       	ret
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
	return US_ERROR;	//Indicates time out
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	9f ef       	ldi	r25, 0xFF	; 255
 160:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;	//Indicates time out
 162:	8e ef       	ldi	r24, 0xFE	; 254
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	08 95       	ret

	//Stop Timer
	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;	//No obstacle
 168:	8e ef       	ldi	r24, 0xFE	; 254
 16a:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
 16c:	08 95       	ret

0000016e <lcd_command>:
{
	// in order to send command to the lcd first we need to write the command on the data pins. then set the RS pin to zero and enable pin to high
	// then wait for one microseconds and set the enable pin to low, this process repeats again. We're using 4 bit data communication but the data is 8-bit
	// so we will send the data divinding it into two section. Higher 4 bit and lower 4 bit
	// the following lines of codes are used to send higher 4 bits of data
	lcd_port = (lcd_port & 0x0F) | (cmnd & 0xF0);  // this line writes the command on the data pins of the lcd connected to th microcontroller portD pin 4 to 7
 16e:	9b b1       	in	r25, 0x0b	; 11
 170:	9f 70       	andi	r25, 0x0F	; 15
 172:	28 2f       	mov	r18, r24
 174:	20 7f       	andi	r18, 0xF0	; 240
 176:	92 2b       	or	r25, r18
 178:	9b b9       	out	0x0b, r25	; 11
	lcd_port &= ~ (1<<rs);
 17a:	9b b1       	in	r25, 0x0b	; 11
 17c:	9e 7f       	andi	r25, 0xFE	; 254
 17e:	9b b9       	out	0x0b, r25	; 11
	lcd_port |= (1<<en);
 180:	9b b1       	in	r25, 0x0b	; 11
 182:	92 60       	ori	r25, 0x02	; 2
 184:	9b b9       	out	0x0b, r25	; 11
 186:	35 e0       	ldi	r19, 0x05	; 5
 188:	3a 95       	dec	r19
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_command+0x1a>
 18c:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 18e:	9b b1       	in	r25, 0x0b	; 11
 190:	9d 7f       	andi	r25, 0xFD	; 253
 192:	9b b9       	out	0x0b, r25	; 11
 194:	ef e1       	ldi	r30, 0x1F	; 31
 196:	f3 e0       	ldi	r31, 0x03	; 3
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_command+0x2a>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_command+0x30>
 19e:	00 00       	nop
	
	// wait 200 microseconds
	_delay_us(200);
	
	// send the lower 4 bit of the data
	lcd_port = (lcd_port & 0x0F) | (cmnd << 4);
 1a0:	2b b1       	in	r18, 0x0b	; 11
 1a2:	f0 e1       	ldi	r31, 0x10	; 16
 1a4:	8f 9f       	mul	r24, r31
 1a6:	c0 01       	movw	r24, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	92 2f       	mov	r25, r18
 1ac:	9f 70       	andi	r25, 0x0F	; 15
 1ae:	89 2b       	or	r24, r25
 1b0:	8b b9       	out	0x0b, r24	; 11
	lcd_port |= (1<<en);
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	35 e0       	ldi	r19, 0x05	; 5
 1ba:	3a 95       	dec	r19
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_command+0x4c>
 1be:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	8d 7f       	andi	r24, 0xFD	; 253
 1c4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	8f e3       	ldi	r24, 0x3F	; 63
 1c8:	9f e1       	ldi	r25, 0x1F	; 31
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_command+0x5c>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_command+0x62>
 1d0:	00 00       	nop
 1d2:	08 95       	ret

000001d4 <initialize>:
Video: https://www.youtube.com/channel/UCV706NGK4bYrhMHQChhpE-g 
Article: https://mendupmindcode.blogspot.com/2021/11/csr04-ultrasonic-sensor-with-atmega328p.htmly
*/
void initialize (void)
{
	lcd_data_dir = 0xFF;     // this will set the LCD pins connected on the microcontroller as output
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	8a b9       	out	0x0a, r24	; 10
 1d8:	8f e5       	ldi	r24, 0x5F	; 95
 1da:	9a ee       	ldi	r25, 0xEA	; 234
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <initialize+0x8>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <initialize+0xe>
 1e2:	00 00       	nop
	_delay_ms(15);           // to show data on the LCD we need to send commands first then the data
	lcd_command(0x02);       // this command returns the cursor to the first row and first column position
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_command>
	lcd_command(0x28);       // please refer to this link to understand meaning of all the commands i will make short video about it 
 1ea:	88 e2       	ldi	r24, 0x28	; 40
 1ec:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_command>
	lcd_command(0x0c);
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_command>
	lcd_command(0x06);
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_command>
	lcd_command(0x01);
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_command>
 202:	8f e3       	ldi	r24, 0x3F	; 63
 204:	9f e1       	ldi	r25, 0x1F	; 31
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <initialize+0x32>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <initialize+0x38>
 20c:	00 00       	nop
 20e:	08 95       	ret

00000210 <lcd_clear>:
	_delay_ms(2);
}

void lcd_clear()
{
	lcd_command (0x01);   // this line clears the LCD screen
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_command>
 216:	8f e3       	ldi	r24, 0x3F	; 63
 218:	9f e1       	ldi	r25, 0x1F	; 31
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_clear+0xa>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <lcd_clear+0x10>
 220:	00 00       	nop
	_delay_ms(2);         // waits for two milliseconds
	lcd_command (0x80);   // this line sets the cursor to the row 1 column 1
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_command>
 228:	08 95       	ret

0000022a <lcd_print>:
}


void lcd_print (char *str)
{
 22a:	fc 01       	movw	r30, r24
	// this function will be used to display the string on the LCD screen
	int i;
	for(i=0; str[i]!=0; i++)
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	34 c0       	rjmp	.+104    	; 0x29a <lcd_print+0x70>
	{
		// we can not send the whole string to the LCD we need to send character by character
		// data sending is same as sending a command. there is one difference, in this case the RS pin will be set to HIGH while the RS pin was set to zero in case of the command sending
		lcd_port = (lcd_port & 0x0F) | (str[i] & 0xF0);
 232:	8b b1       	in	r24, 0x0b	; 11
 234:	8f 70       	andi	r24, 0x0F	; 15
 236:	90 7f       	andi	r25, 0xF0	; 240
 238:	98 2b       	or	r25, r24
 23a:	9b b9       	out	0x0b, r25	; 11
		lcd_port |= (1<<rs);
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	8b b9       	out	0x0b, r24	; 11
		lcd_port|= (1<<en);
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	82 60       	ori	r24, 0x02	; 2
 246:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_print+0x20>
 24e:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 250:	8b b1       	in	r24, 0x0b	; 11
 252:	8d 7f       	andi	r24, 0xFD	; 253
 254:	8b b9       	out	0x0b, r24	; 11
 256:	8f e1       	ldi	r24, 0x1F	; 31
 258:	93 e0       	ldi	r25, 0x03	; 3
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_print+0x30>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_print+0x36>
 260:	00 00       	nop
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (str[i] << 4);
 262:	4b b1       	in	r20, 0x0b	; 11
 264:	9c 91       	ld	r25, X
 266:	80 e1       	ldi	r24, 0x10	; 16
 268:	98 9f       	mul	r25, r24
 26a:	90 01       	movw	r18, r0
 26c:	11 24       	eor	r1, r1
 26e:	94 2f       	mov	r25, r20
 270:	9f 70       	andi	r25, 0x0F	; 15
 272:	29 2b       	or	r18, r25
 274:	2b b9       	out	0x0b, r18	; 11
		lcd_port |= (1<<en);
 276:	9b b1       	in	r25, 0x0b	; 11
 278:	92 60       	ori	r25, 0x02	; 2
 27a:	9b b9       	out	0x0b, r25	; 11
 27c:	95 e0       	ldi	r25, 0x05	; 5
 27e:	9a 95       	dec	r25
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_print+0x54>
 282:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 284:	9b b1       	in	r25, 0x0b	; 11
 286:	9d 7f       	andi	r25, 0xFD	; 253
 288:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	8f e3       	ldi	r24, 0x3F	; 63
 28c:	9f e1       	ldi	r25, 0x1F	; 31
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_print+0x64>
 292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_print+0x6a>
 294:	00 00       	nop

void lcd_print (char *str)
{
	// this function will be used to display the string on the LCD screen
	int i;
	for(i=0; str[i]!=0; i++)
 296:	6f 5f       	subi	r22, 0xFF	; 255
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	df 01       	movw	r26, r30
 29c:	a6 0f       	add	r26, r22
 29e:	b7 1f       	adc	r27, r23
 2a0:	9c 91       	ld	r25, X
 2a2:	91 11       	cpse	r25, r1
 2a4:	c6 cf       	rjmp	.-116    	; 0x232 <lcd_print+0x8>
		lcd_port |= (1<<en);
		_delay_us(1);
		lcd_port &= ~ (1<<en);
		_delay_ms(2);
	}
}
 2a6:	08 95       	ret

000002a8 <lcd_setCursor>:



void lcd_setCursor(unsigned char x, unsigned char y){    // this function will be used to set cursor. the place where we want to display the data
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <lcd_setCursor+0x6>
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
	unsigned char adr[] = {0x80, 0xC0};    // the 16x2 LCD has two rows first row has a value of 0x80. So let's say we want to go to the seconds column of first row
 2b2:	90 e8       	ldi	r25, 0x80	; 128
 2b4:	99 83       	std	Y+1, r25	; 0x01
 2b6:	90 ec       	ldi	r25, 0xC0	; 192
 2b8:	9a 83       	std	Y+2, r25	; 0x02
	// we just need to send the command with adding 2 with the initial value. So, it will be (0x80 + 2) this is how the code works
	lcd_command(adr[y-1] + x-1);
 2ba:	e6 2f       	mov	r30, r22
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	2c 0f       	add	r18, r28
 2c6:	3d 1f       	adc	r19, r29
 2c8:	e2 0f       	add	r30, r18
 2ca:	f3 1f       	adc	r31, r19
 2cc:	90 81       	ld	r25, Z
 2ce:	89 0f       	add	r24, r25
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	8f e8       	ldi	r24, 0x8F	; 143
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_setCursor+0x32>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_setCursor+0x38>
 2e0:	00 00       	nop
	_delay_us(100);
}
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <main>:

int main()
{
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <main+0x6>
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <main+0x8>
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	initialize();           // we're initializing the LCD
 2f8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <initialize>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	2f ef       	ldi	r18, 0xFF	; 255
 2fe:	81 ee       	ldi	r24, 0xE1	; 225
 300:	94 e0       	ldi	r25, 0x04	; 4
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <main+0x16>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <main+0x20>
 30c:	00 00       	nop
		_delay_ms(100);	//Let the LCD Module start


		
		//Set io port direction of sensor
		HCSR04Init();
 30e:	0e 94 53 00 	call	0xa6	; 0xa6 <HCSR04Init>


		DDRC |= (1 << led1) | (1 << led2) | ( 1 << led3) | ( 1 << led4);    // we're setting all the leds as output
 312:	87 b1       	in	r24, 0x07	; 7
 314:	8c 63       	ori	r24, 0x3C	; 60
 316:	87 b9       	out	0x07, r24	; 7
		DDRD |= (1 << led5);                                                 // we need to set the fifth led as output separately because it is on another port
 318:	8a b1       	in	r24, 0x0a	; 10
 31a:	84 60       	ori	r24, 0x04	; 4
 31c:	8a b9       	out	0x0a, r24	; 10
		//PORTC |= 1 << led1;
		while(1)
		{
			
			//Send a trigger pulse
			HCSR04Trigger();               // calling the ultrasonic sound wave generator function
 31e:	0e 94 57 00 	call	0xae	; 0xae <HCSR04Trigger>

			//Measure the width of pulse
			r=GetPulseWidth();             // getting the duration of the ultrasound took to echo back after hitting the object
 322:	0e 94 61 00 	call	0xc2	; 0xc2 <GetPulseWidth>

			//Handle Errors
			if(r==US_ERROR)                // if microcontroller doesn't get any pulse then it will set the US_ERROR variable to -1
 326:	8f 3f       	cpi	r24, 0xFF	; 255
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	92 07       	cpc	r25, r18
 32c:	49 f4       	brne	.+18     	; 0x340 <main+0x54>
			// the following code will check if there is error then it will be displayed on the LCD screen
			{
				lcd_setCursor(1, 1);      //lcd_setCursor(column, row)
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_setCursor>
				lcd_print("Error!");
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
 33e:	ef cf       	rjmp	.-34     	; 0x31e <main+0x32>
			}
			else
			{
				
				distance=(r*0.034/2.0);	// This will give the distance in centimeters
 340:	bc 01       	movw	r22, r24
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 2a 02 	call	0x454	; 0x454 <__floatunsisf>
 34a:	26 e9       	ldi	r18, 0x96	; 150
 34c:	33 e4       	ldi	r19, 0x43	; 67
 34e:	4b e0       	ldi	r20, 0x0B	; 11
 350:	5d e3       	ldi	r21, 0x3D	; 61
 352:	0e 94 90 02 	call	0x520	; 0x520 <__mulsf3>
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	5f e3       	ldi	r21, 0x3F	; 63
 35e:	0e 94 90 02 	call	0x520	; 0x520 <__mulsf3>
 362:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__fixsfsi>
 366:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <distance+0x1>
 36a:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <distance>
				
				
				if (distance != previous_distance)    // the LCD screen only need to be cleared if the distance is changed otherwise it is not required
 36e:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 372:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 376:	26 17       	cp	r18, r22
 378:	37 07       	cpc	r19, r23
 37a:	11 f0       	breq	.+4      	; 0x380 <main+0x94>
				{
					lcd_clear();
 37c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_clear>
				}
				
				lcd_setCursor(1, 1);      // set the row and column to display the data
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_setCursor>
				lcd_print("Distance = ");
 388:	87 e0       	ldi	r24, 0x07	; 7
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
				lcd_setCursor(12, 1);      //lcd_setCursor(column, row)
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	8c e0       	ldi	r24, 0x0C	; 12
 394:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_setCursor>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 398:	4a e0       	ldi	r20, 0x0A	; 10
 39a:	be 01       	movw	r22, r28
 39c:	6f 5f       	subi	r22, 0xFF	; 255
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <distance>
 3a4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <distance+0x1>
 3a8:	0e 94 25 03 	call	0x64a	; 0x64a <__itoa_ncheck>
				itoa(distance, numberString, 10);    // distance is an integer number, we can not display integer directly on the LCD. this line converts integer into array of character
				lcd_print(numberString);
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
				lcd_setCursor(14, 1);      //set the row to 1 and and column to 14 to display the data
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	8e e0       	ldi	r24, 0x0E	; 14
 3b8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_setCursor>
				lcd_print(" cm");
 3bc:	83 e1       	ldi	r24, 0x13	; 19
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
				
				
				
				
				previous_distance = distance;
 3c4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <distance>
 3c8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <distance+0x1>
 3cc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 3d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	96 e7       	ldi	r25, 0x76	; 118
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	81 50       	subi	r24, 0x01	; 1
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	20 40       	sbci	r18, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0xee>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0xf8>
 3e4:	00 00       	nop
 3e6:	9b cf       	rjmp	.-202    	; 0x31e <main+0x32>

000003e8 <__fixsfsi>:
 3e8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fixunssfsi>
 3ec:	68 94       	set
 3ee:	b1 11       	cpse	r27, r1
 3f0:	0c 94 8a 02 	jmp	0x514	; 0x514 <__fp_szero>
 3f4:	08 95       	ret

000003f6 <__fixunssfsi>:
 3f6:	0e 94 6f 02 	call	0x4de	; 0x4de <__fp_splitA>
 3fa:	88 f0       	brcs	.+34     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3fc:	9f 57       	subi	r25, 0x7F	; 127
 3fe:	98 f0       	brcs	.+38     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 400:	b9 2f       	mov	r27, r25
 402:	99 27       	eor	r25, r25
 404:	b7 51       	subi	r27, 0x17	; 23
 406:	b0 f0       	brcs	.+44     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 408:	e1 f0       	breq	.+56     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	88 1f       	adc	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	1a f0       	brmi	.+6      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 414:	ba 95       	dec	r27
 416:	c9 f7       	brne	.-14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 418:	14 c0       	rjmp	.+40     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 41a:	b1 30       	cpi	r27, 0x01	; 1
 41c:	91 f0       	breq	.+36     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 41e:	0e 94 89 02 	call	0x512	; 0x512 <__fp_zero>
 422:	b1 e0       	ldi	r27, 0x01	; 1
 424:	08 95       	ret
 426:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_zero>
 42a:	67 2f       	mov	r22, r23
 42c:	78 2f       	mov	r23, r24
 42e:	88 27       	eor	r24, r24
 430:	b8 5f       	subi	r27, 0xF8	; 248
 432:	39 f0       	breq	.+14     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 434:	b9 3f       	cpi	r27, 0xF9	; 249
 436:	cc f3       	brlt	.-14     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 438:	86 95       	lsr	r24
 43a:	77 95       	ror	r23
 43c:	67 95       	ror	r22
 43e:	b3 95       	inc	r27
 440:	d9 f7       	brne	.-10     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 442:	3e f4       	brtc	.+14     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 444:	90 95       	com	r25
 446:	80 95       	com	r24
 448:	70 95       	com	r23
 44a:	61 95       	neg	r22
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	8f 4f       	sbci	r24, 0xFF	; 255
 450:	9f 4f       	sbci	r25, 0xFF	; 255
 452:	08 95       	ret

00000454 <__floatunsisf>:
 454:	e8 94       	clt
 456:	09 c0       	rjmp	.+18     	; 0x46a <__floatsisf+0x12>

00000458 <__floatsisf>:
 458:	97 fb       	bst	r25, 7
 45a:	3e f4       	brtc	.+14     	; 0x46a <__floatsisf+0x12>
 45c:	90 95       	com	r25
 45e:	80 95       	com	r24
 460:	70 95       	com	r23
 462:	61 95       	neg	r22
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	8f 4f       	sbci	r24, 0xFF	; 255
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	99 23       	and	r25, r25
 46c:	a9 f0       	breq	.+42     	; 0x498 <__floatsisf+0x40>
 46e:	f9 2f       	mov	r31, r25
 470:	96 e9       	ldi	r25, 0x96	; 150
 472:	bb 27       	eor	r27, r27
 474:	93 95       	inc	r25
 476:	f6 95       	lsr	r31
 478:	87 95       	ror	r24
 47a:	77 95       	ror	r23
 47c:	67 95       	ror	r22
 47e:	b7 95       	ror	r27
 480:	f1 11       	cpse	r31, r1
 482:	f8 cf       	rjmp	.-16     	; 0x474 <__floatsisf+0x1c>
 484:	fa f4       	brpl	.+62     	; 0x4c4 <__floatsisf+0x6c>
 486:	bb 0f       	add	r27, r27
 488:	11 f4       	brne	.+4      	; 0x48e <__floatsisf+0x36>
 48a:	60 ff       	sbrs	r22, 0
 48c:	1b c0       	rjmp	.+54     	; 0x4c4 <__floatsisf+0x6c>
 48e:	6f 5f       	subi	r22, 0xFF	; 255
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	8f 4f       	sbci	r24, 0xFF	; 255
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	16 c0       	rjmp	.+44     	; 0x4c4 <__floatsisf+0x6c>
 498:	88 23       	and	r24, r24
 49a:	11 f0       	breq	.+4      	; 0x4a0 <__floatsisf+0x48>
 49c:	96 e9       	ldi	r25, 0x96	; 150
 49e:	11 c0       	rjmp	.+34     	; 0x4c2 <__floatsisf+0x6a>
 4a0:	77 23       	and	r23, r23
 4a2:	21 f0       	breq	.+8      	; 0x4ac <__floatsisf+0x54>
 4a4:	9e e8       	ldi	r25, 0x8E	; 142
 4a6:	87 2f       	mov	r24, r23
 4a8:	76 2f       	mov	r23, r22
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__floatsisf+0x5e>
 4ac:	66 23       	and	r22, r22
 4ae:	71 f0       	breq	.+28     	; 0x4cc <__floatsisf+0x74>
 4b0:	96 e8       	ldi	r25, 0x86	; 134
 4b2:	86 2f       	mov	r24, r22
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	2a f0       	brmi	.+10     	; 0x4c4 <__floatsisf+0x6c>
 4ba:	9a 95       	dec	r25
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	88 1f       	adc	r24, r24
 4c2:	da f7       	brpl	.-10     	; 0x4ba <__floatsisf+0x62>
 4c4:	88 0f       	add	r24, r24
 4c6:	96 95       	lsr	r25
 4c8:	87 95       	ror	r24
 4ca:	97 f9       	bld	r25, 7
 4cc:	08 95       	ret

000004ce <__fp_split3>:
 4ce:	57 fd       	sbrc	r21, 7
 4d0:	90 58       	subi	r25, 0x80	; 128
 4d2:	44 0f       	add	r20, r20
 4d4:	55 1f       	adc	r21, r21
 4d6:	59 f0       	breq	.+22     	; 0x4ee <__fp_splitA+0x10>
 4d8:	5f 3f       	cpi	r21, 0xFF	; 255
 4da:	71 f0       	breq	.+28     	; 0x4f8 <__fp_splitA+0x1a>
 4dc:	47 95       	ror	r20

000004de <__fp_splitA>:
 4de:	88 0f       	add	r24, r24
 4e0:	97 fb       	bst	r25, 7
 4e2:	99 1f       	adc	r25, r25
 4e4:	61 f0       	breq	.+24     	; 0x4fe <__fp_splitA+0x20>
 4e6:	9f 3f       	cpi	r25, 0xFF	; 255
 4e8:	79 f0       	breq	.+30     	; 0x508 <__fp_splitA+0x2a>
 4ea:	87 95       	ror	r24
 4ec:	08 95       	ret
 4ee:	12 16       	cp	r1, r18
 4f0:	13 06       	cpc	r1, r19
 4f2:	14 06       	cpc	r1, r20
 4f4:	55 1f       	adc	r21, r21
 4f6:	f2 cf       	rjmp	.-28     	; 0x4dc <__fp_split3+0xe>
 4f8:	46 95       	lsr	r20
 4fa:	f1 df       	rcall	.-30     	; 0x4de <__fp_splitA>
 4fc:	08 c0       	rjmp	.+16     	; 0x50e <__fp_splitA+0x30>
 4fe:	16 16       	cp	r1, r22
 500:	17 06       	cpc	r1, r23
 502:	18 06       	cpc	r1, r24
 504:	99 1f       	adc	r25, r25
 506:	f1 cf       	rjmp	.-30     	; 0x4ea <__fp_splitA+0xc>
 508:	86 95       	lsr	r24
 50a:	71 05       	cpc	r23, r1
 50c:	61 05       	cpc	r22, r1
 50e:	08 94       	sec
 510:	08 95       	ret

00000512 <__fp_zero>:
 512:	e8 94       	clt

00000514 <__fp_szero>:
 514:	bb 27       	eor	r27, r27
 516:	66 27       	eor	r22, r22
 518:	77 27       	eor	r23, r23
 51a:	cb 01       	movw	r24, r22
 51c:	97 f9       	bld	r25, 7
 51e:	08 95       	ret

00000520 <__mulsf3>:
 520:	0e 94 a3 02 	call	0x546	; 0x546 <__mulsf3x>
 524:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_round>
 528:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscA>
 52c:	38 f0       	brcs	.+14     	; 0x53c <__mulsf3+0x1c>
 52e:	0e 94 0d 03 	call	0x61a	; 0x61a <__fp_pscB>
 532:	20 f0       	brcs	.+8      	; 0x53c <__mulsf3+0x1c>
 534:	95 23       	and	r25, r21
 536:	11 f0       	breq	.+4      	; 0x53c <__mulsf3+0x1c>
 538:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_inf>
 53c:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_nan>
 540:	11 24       	eor	r1, r1
 542:	0c 94 8a 02 	jmp	0x514	; 0x514 <__fp_szero>

00000546 <__mulsf3x>:
 546:	0e 94 67 02 	call	0x4ce	; 0x4ce <__fp_split3>
 54a:	70 f3       	brcs	.-36     	; 0x528 <__mulsf3+0x8>

0000054c <__mulsf3_pse>:
 54c:	95 9f       	mul	r25, r21
 54e:	c1 f3       	breq	.-16     	; 0x540 <__mulsf3+0x20>
 550:	95 0f       	add	r25, r21
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	55 1f       	adc	r21, r21
 556:	62 9f       	mul	r22, r18
 558:	f0 01       	movw	r30, r0
 55a:	72 9f       	mul	r23, r18
 55c:	bb 27       	eor	r27, r27
 55e:	f0 0d       	add	r31, r0
 560:	b1 1d       	adc	r27, r1
 562:	63 9f       	mul	r22, r19
 564:	aa 27       	eor	r26, r26
 566:	f0 0d       	add	r31, r0
 568:	b1 1d       	adc	r27, r1
 56a:	aa 1f       	adc	r26, r26
 56c:	64 9f       	mul	r22, r20
 56e:	66 27       	eor	r22, r22
 570:	b0 0d       	add	r27, r0
 572:	a1 1d       	adc	r26, r1
 574:	66 1f       	adc	r22, r22
 576:	82 9f       	mul	r24, r18
 578:	22 27       	eor	r18, r18
 57a:	b0 0d       	add	r27, r0
 57c:	a1 1d       	adc	r26, r1
 57e:	62 1f       	adc	r22, r18
 580:	73 9f       	mul	r23, r19
 582:	b0 0d       	add	r27, r0
 584:	a1 1d       	adc	r26, r1
 586:	62 1f       	adc	r22, r18
 588:	83 9f       	mul	r24, r19
 58a:	a0 0d       	add	r26, r0
 58c:	61 1d       	adc	r22, r1
 58e:	22 1f       	adc	r18, r18
 590:	74 9f       	mul	r23, r20
 592:	33 27       	eor	r19, r19
 594:	a0 0d       	add	r26, r0
 596:	61 1d       	adc	r22, r1
 598:	23 1f       	adc	r18, r19
 59a:	84 9f       	mul	r24, r20
 59c:	60 0d       	add	r22, r0
 59e:	21 1d       	adc	r18, r1
 5a0:	82 2f       	mov	r24, r18
 5a2:	76 2f       	mov	r23, r22
 5a4:	6a 2f       	mov	r22, r26
 5a6:	11 24       	eor	r1, r1
 5a8:	9f 57       	subi	r25, 0x7F	; 127
 5aa:	50 40       	sbci	r21, 0x00	; 0
 5ac:	9a f0       	brmi	.+38     	; 0x5d4 <__mulsf3_pse+0x88>
 5ae:	f1 f0       	breq	.+60     	; 0x5ec <__mulsf3_pse+0xa0>
 5b0:	88 23       	and	r24, r24
 5b2:	4a f0       	brmi	.+18     	; 0x5c6 <__mulsf3_pse+0x7a>
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	bb 1f       	adc	r27, r27
 5ba:	66 1f       	adc	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	88 1f       	adc	r24, r24
 5c0:	91 50       	subi	r25, 0x01	; 1
 5c2:	50 40       	sbci	r21, 0x00	; 0
 5c4:	a9 f7       	brne	.-22     	; 0x5b0 <__mulsf3_pse+0x64>
 5c6:	9e 3f       	cpi	r25, 0xFE	; 254
 5c8:	51 05       	cpc	r21, r1
 5ca:	80 f0       	brcs	.+32     	; 0x5ec <__mulsf3_pse+0xa0>
 5cc:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_inf>
 5d0:	0c 94 8a 02 	jmp	0x514	; 0x514 <__fp_szero>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	e4 f3       	brlt	.-8      	; 0x5d0 <__mulsf3_pse+0x84>
 5d8:	98 3e       	cpi	r25, 0xE8	; 232
 5da:	d4 f3       	brlt	.-12     	; 0x5d0 <__mulsf3_pse+0x84>
 5dc:	86 95       	lsr	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b7 95       	ror	r27
 5e4:	f7 95       	ror	r31
 5e6:	e7 95       	ror	r30
 5e8:	9f 5f       	subi	r25, 0xFF	; 255
 5ea:	c1 f7       	brne	.-16     	; 0x5dc <__mulsf3_pse+0x90>
 5ec:	fe 2b       	or	r31, r30
 5ee:	88 0f       	add	r24, r24
 5f0:	91 1d       	adc	r25, r1
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	97 f9       	bld	r25, 7
 5f8:	08 95       	ret

000005fa <__fp_inf>:
 5fa:	97 f9       	bld	r25, 7
 5fc:	9f 67       	ori	r25, 0x7F	; 127
 5fe:	80 e8       	ldi	r24, 0x80	; 128
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	08 95       	ret

00000606 <__fp_nan>:
 606:	9f ef       	ldi	r25, 0xFF	; 255
 608:	80 ec       	ldi	r24, 0xC0	; 192
 60a:	08 95       	ret

0000060c <__fp_pscA>:
 60c:	00 24       	eor	r0, r0
 60e:	0a 94       	dec	r0
 610:	16 16       	cp	r1, r22
 612:	17 06       	cpc	r1, r23
 614:	18 06       	cpc	r1, r24
 616:	09 06       	cpc	r0, r25
 618:	08 95       	ret

0000061a <__fp_pscB>:
 61a:	00 24       	eor	r0, r0
 61c:	0a 94       	dec	r0
 61e:	12 16       	cp	r1, r18
 620:	13 06       	cpc	r1, r19
 622:	14 06       	cpc	r1, r20
 624:	05 06       	cpc	r0, r21
 626:	08 95       	ret

00000628 <__fp_round>:
 628:	09 2e       	mov	r0, r25
 62a:	03 94       	inc	r0
 62c:	00 0c       	add	r0, r0
 62e:	11 f4       	brne	.+4      	; 0x634 <__fp_round+0xc>
 630:	88 23       	and	r24, r24
 632:	52 f0       	brmi	.+20     	; 0x648 <__fp_round+0x20>
 634:	bb 0f       	add	r27, r27
 636:	40 f4       	brcc	.+16     	; 0x648 <__fp_round+0x20>
 638:	bf 2b       	or	r27, r31
 63a:	11 f4       	brne	.+4      	; 0x640 <__fp_round+0x18>
 63c:	60 ff       	sbrs	r22, 0
 63e:	04 c0       	rjmp	.+8      	; 0x648 <__fp_round+0x20>
 640:	6f 5f       	subi	r22, 0xFF	; 255
 642:	7f 4f       	sbci	r23, 0xFF	; 255
 644:	8f 4f       	sbci	r24, 0xFF	; 255
 646:	9f 4f       	sbci	r25, 0xFF	; 255
 648:	08 95       	ret

0000064a <__itoa_ncheck>:
 64a:	bb 27       	eor	r27, r27
 64c:	4a 30       	cpi	r20, 0x0A	; 10
 64e:	31 f4       	brne	.+12     	; 0x65c <__itoa_ncheck+0x12>
 650:	99 23       	and	r25, r25
 652:	22 f4       	brpl	.+8      	; 0x65c <__itoa_ncheck+0x12>
 654:	bd e2       	ldi	r27, 0x2D	; 45
 656:	90 95       	com	r25
 658:	81 95       	neg	r24
 65a:	9f 4f       	sbci	r25, 0xFF	; 255
 65c:	0c 94 31 03 	jmp	0x662	; 0x662 <__utoa_common>

00000660 <__utoa_ncheck>:
 660:	bb 27       	eor	r27, r27

00000662 <__utoa_common>:
 662:	fb 01       	movw	r30, r22
 664:	55 27       	eor	r21, r21
 666:	aa 27       	eor	r26, r26
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	aa 1f       	adc	r26, r26
 66e:	a4 17       	cp	r26, r20
 670:	10 f0       	brcs	.+4      	; 0x676 <__utoa_common+0x14>
 672:	a4 1b       	sub	r26, r20
 674:	83 95       	inc	r24
 676:	50 51       	subi	r21, 0x10	; 16
 678:	b9 f7       	brne	.-18     	; 0x668 <__utoa_common+0x6>
 67a:	a0 5d       	subi	r26, 0xD0	; 208
 67c:	aa 33       	cpi	r26, 0x3A	; 58
 67e:	08 f0       	brcs	.+2      	; 0x682 <__utoa_common+0x20>
 680:	a9 5d       	subi	r26, 0xD9	; 217
 682:	a1 93       	st	Z+, r26
 684:	00 97       	sbiw	r24, 0x00	; 0
 686:	79 f7       	brne	.-34     	; 0x666 <__utoa_common+0x4>
 688:	b1 11       	cpse	r27, r1
 68a:	b1 93       	st	Z+, r27
 68c:	11 92       	st	Z+, r1
 68e:	cb 01       	movw	r24, r22
 690:	0c 94 4a 03 	jmp	0x694	; 0x694 <strrev>

00000694 <strrev>:
 694:	dc 01       	movw	r26, r24
 696:	fc 01       	movw	r30, r24
 698:	67 2f       	mov	r22, r23
 69a:	71 91       	ld	r23, Z+
 69c:	77 23       	and	r23, r23
 69e:	e1 f7       	brne	.-8      	; 0x698 <strrev+0x4>
 6a0:	32 97       	sbiw	r30, 0x02	; 2
 6a2:	04 c0       	rjmp	.+8      	; 0x6ac <strrev+0x18>
 6a4:	7c 91       	ld	r23, X
 6a6:	6d 93       	st	X+, r22
 6a8:	70 83       	st	Z, r23
 6aa:	62 91       	ld	r22, -Z
 6ac:	ae 17       	cp	r26, r30
 6ae:	bf 07       	cpc	r27, r31
 6b0:	c8 f3       	brcs	.-14     	; 0x6a4 <strrev+0x10>
 6b2:	08 95       	ret

000006b4 <_exit>:
 6b4:	f8 94       	cli

000006b6 <__stop_program>:
 6b6:	ff cf       	rjmp	.-2      	; 0x6b6 <__stop_program>
